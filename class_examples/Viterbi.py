# -*- coding: utf-8 -*-
"""ViterbiClassB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yv7p7qqvPEstdb0P573Y6Y7GM7LnsTWw
"""

import random

efair = [0, 1.0/6.0, 1.0/6.0, 1.0/6.0, 1.0/6.0, 1.0/6.0, 1.0/6.0]
eloaded = [0, 1.0/10.0, 1.0/10.0, 1.0/10.0, 1.0/10.0, 1.0/10.0, 1.0/2.0]

x=[]
#for i in range(10):
#    x.append(random.randint(1,6))
x = [1,3,6,6,6,6,6,6,6,6,6,6]
    #x[] = [1,2,5,3,6,...]
aFF = 0.95 # fair to fair transition
aFL = 0.05 # fair to loaded
aLL = 0.9 # loaded to loaded
aLF = 0.1 # loaded to fair

vfair = []
vloaded = []
vfairP =[] # collection of the probabilities at the current point to switch either to or from fair I believe
vloadedP = []
vfair.append(0.5)
vloaded.append(0.5)
for i in range(1,(len(x)+1)):
    vfair.append(efair[x[i-1]] * max(vfair[i-1]*aFF, vloaded[i-1]*aLF ))
    if(vfair[i-1]*aFF > vloaded[i-1]*aLF):
        vfairP.append('F')
    else:
        vfairP.append('L')
    vloaded.append(eloaded[x[i-1]] *max(vfair[i-1]*aFL, vloaded[i-1]*aLL) )
    if(vfair[i-1]*aFL > vloaded[i-1]*aLL):
        vloadedP.append('F')
    else:
        vloadedP.append('L')
print(vfair)
print(vloaded)
print(vfairP)
print(vloadedP)
print(x)
path = []
currentState = ""
if(vfair[len(x)] > vloaded[len(x)]):
    currentState = "F"
else:
    currentState = "L"
path.append(currentState)
for i in range(len(x)-1,0,-1):
    if(currentState == "F"):
        currentState = vfairP[i]
    else:
        currentState = vloadedP[i]
    path.append(currentState)
path = path[::-1]
#path.reverse()
print(path)